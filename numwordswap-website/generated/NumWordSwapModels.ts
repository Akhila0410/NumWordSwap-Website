//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class NumWordSwapClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7152";
    }

    getSwappedNumWords(request: NumWordSwapRequest): Promise<NumberSwapedWord[]> {
        let url_ = this.baseUrl + "/api/getswappednumwords";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSwappedNumWords(_response);
        });
    }

    protected processGetSwappedNumWords(response: Response): Promise<NumberSwapedWord[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(NumberSwapedWord.fromJS(item));
                }
                else {
                    result200 = <any>null;
                }
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NumberSwapedWord[]>(null as any);
    }
}

export class NumberSwapedWord implements INumberSwapedWord {
    number!: number;
    swappedWord?: string | undefined;

    constructor(data?: INumberSwapedWord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.swappedWord = _data["swappedWord"];
        }
    }

    static fromJS(data: any): NumberSwapedWord {
        data = typeof data === 'object' ? data : {};
        let result = new NumberSwapedWord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["swappedWord"] = this.swappedWord;
        return data;
    }
}

export interface INumberSwapedWord {
    number: number;
    swappedWord?: string | undefined;
}

export class NumWordSwapRequest implements INumWordSwapRequest {
    maxNumber!: number;
    multipleWordSwaps?: MultipleWordSwap[] | undefined;
    sortedOrder!: boolean;

    constructor(data?: INumWordSwapRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxNumber = _data["maxNumber"];
            if (Array.isArray(_data["multipleWordSwaps"])) {
                this.multipleWordSwaps = [] as any;
                for (let item of _data["multipleWordSwaps"])
                    this.multipleWordSwaps!.push(MultipleWordSwap.fromJS(item));
            }
            this.sortedOrder = _data["sortedOrder"];
        }
    }

    static fromJS(data: any): NumWordSwapRequest {
        data = typeof data === 'object' ? data : {};
        let result = new NumWordSwapRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxNumber"] = this.maxNumber;
        if (Array.isArray(this.multipleWordSwaps)) {
            data["multipleWordSwaps"] = [];
            for (let item of this.multipleWordSwaps)
                data["multipleWordSwaps"].push(item.toJSON());
        }
        data["sortedOrder"] = this.sortedOrder;
        return data;
    }
}

export interface INumWordSwapRequest {
    maxNumber: number;
    multipleWordSwaps?: MultipleWordSwap[] | undefined;
    sortedOrder: boolean;
}

export class MultipleWordSwap implements IMultipleWordSwap {
    multiple!: number;
    wordSwap?: string | undefined;

    constructor(data?: IMultipleWordSwap) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.multiple = _data["multiple"];
            this.wordSwap = _data["wordSwap"];
        }
    }

    static fromJS(data: any): MultipleWordSwap {
        data = typeof data === 'object' ? data : {};
        let result = new MultipleWordSwap();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["multiple"] = this.multiple;
        data["wordSwap"] = this.wordSwap;
        return data;
    }
}

export interface IMultipleWordSwap {
    multiple: number;
    wordSwap?: string | undefined;
}

export class ApiException extends Error {
    //message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}